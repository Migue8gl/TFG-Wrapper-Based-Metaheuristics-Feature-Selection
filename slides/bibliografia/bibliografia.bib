@inproceedings{binary_real,
  author = {Pan, Shing-Tai and Wu, Chih-Hung and Ouyang, Chen-Sen and Lee, Ying-Wei},
  year   = {2018},
  month  = {07},
  pages  = {140-147},
  title  = {Emotion Recognition from Speech Signals by Using Evolutionary Algorithm and Empirical Mode Decomposition},
  doi    = {10.14236/ewic/EVA2018.29}
}

@misc{wiki:PSO,
  author = {{Wikipedia contributors}},
  title  = {{Particle swarm optimization -- Wikipedia{,} The Free Encyclopedia}},
  year   = {2024},
  url    = {https://en.wikipedia.org/wiki/Particle_swarm_optimization},
  note   = {[Online; accessed 26-June-2024]}
}


@article{Mafarja201825,
  author  = {M. Mafarja and I. Aljarah and A. A. Heidari and A. I. Hammouri and H. Faris and A. M. Al-Zoubi and S. Mirjalili},
  title   = {Evolutionary Population Dynamics and Grasshopper Optimization approaches for feature selection problems},
  year    = {2018},
  journal = {Knowledge-Based Systems},
  volume  = {145},
  pages   = {25--45},
  doi     = {10.1016/j.knosys.2017.12.037},
  url     = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040020546&doi=10.1016%2fj.knosys.2017.12.037&partnerID=40&md5=48c70ba8b45fb49d6218a39cfdc5c11d},
  note    = {Cited by: 351; All Open Access, Green Open Access}
}

@article{mirjalili_grey_2014,
  author   = {Mirjalili, S. and Mirjalili, S. M. and Lewis, A.},
  title    = {Grey {Wolf} {Optimizer}},
  journal  = {Advances in Engineering Software},
  volume   = {69},
  number   = {},
  pages    = {46--61},
  year     = {2014},
  month    = mar,
  doi      = {10.1016/j.advengsoft.2013.12.007},
  url      = {https://www.sciencedirect.com/science/article/pii/S0965997813001853},
  abstract = {This work proposes a new meta-heuristic called Grey Wolf Optimizer (GWO) inspired by grey wolves (Canis lupus). The GWO algorithm mimics the leadership hierarchy and hunting mechanism of grey wolves in nature. Four types of grey wolves such as alpha, beta, delta, and omega are employed for simulating the leadership hierarchy. In addition, the three main steps of hunting, searching for prey, encircling prey, and attacking prey, are implemented. The algorithm is then benchmarked on 29 well-known test functions, and the results are verified by a comparative study with Particle Swarm Optimization (PSO), Gravitational Search Algorithm (GSA), Differential Evolution (DE), Evolutionary Programming (EP), and Evolution Strategy (ES). The results show that the GWO algorithm is able to provide very competitive results compared to these well-known meta-heuristics. The paper also considers solving three classical engineering design problems (tension/compression spring, welded beam, and pressure vessel designs) and presents a real application of the proposed method in the field of optical engineering. The results of the classical engineering design problems and real application prove that the proposed algorithm is applicable to challenging problems with unknown search spaces.},
  keywords = {Constrained optimization, Heuristic algorithm, Optimization, Metaheuristics, Optimization techniques, GWO},
  issn     = {0965-9978},
  language = {en-US},
  urldate  = {2023-11-18}
}


@article{saremi_grasshopper_2017,
  title    = {Grasshopper {Optimisation} {Algorithm}: {Theory} and application},
  author   = {S. Saremi and S. Mirjalili and A. Lewis},
  journal  = {Advances in Engineering Software},
  volume   = {105},
  pages    = {30--47},
  year     = {2017},
  month    = mar,
  doi      = {10.1016/j.advengsoft.2017.01.004},
  issn     = {0965-9978},
  abstract = {This paper proposes an optimisation algorithm called Grasshopper Optimisation Algorithm (GOA) and applies it to challenging problems in structural optimisation. The proposed algorithm mathematically models and mimics the behaviour of grasshopper swarms in nature for solving optimisation problems. The GOA algorithm is first benchmarked on a set of test problems including CEC2005 to test and verify its performance qualitatively and quantitatively. It is then employed to find the optimal shape for a 52-bar truss, 3-bar truss, and cantilever beam to demonstrate its applicability. The results show that the proposed algorithm is able to provide superior results compared to well-known and recent algorithms in the literature. The results of the real applications also prove the merits of GOA in solving real problems with unknown search spaces.},
  keywords = {Algorithm, Benchmark, Constrained optimization, Heuristic algorithm, Optimization, Metaheuristics, Optimization techniques},
  language = {en-US},
  urldate  = {2023-11-04},
  url      = {https://www.sciencedirect.com/science/article/pii/S0965997816305646}
}

@misc{chiswickchap_cuckooeggs_2024,
  author = {Chiswick Chap},
  title  = {Cuckoo Eggs Mimicking Reed Warbler Eggs},
  year   = {2024},
  url    = {https://commons.wikimedia.org/w/index.php?curid=18861052},
  note   = {CC BY-SA 3.0}
}

@article{mathew2012genetic,
  author  = {T. V. Mathew},
  title   = {Genetic algorithm},
  journal = {Report submitted at IIT Bombay},
  volume  = {53},
  year    = {2012}
}

@article{mirjalili_whale_2016,
  title    = {The {Whale} {Optimization} {Algorithm}},
  author   = {S. Mirjalili and A. Lewis},
  journal  = {Advances in Engineering Software},
  volume   = {95},
  pages    = {51--67},
  year     = {2016},
  month    = may,
  doi      = {10.1016/j.advengsoft.2016.01.008},
  issn     = {0965-9978},
  abstract = {This paper proposes a novel nature-inspired meta-heuristic optimization algorithm, called Whale Optimization Algorithm (WOA), which mimics the social behavior of humpback whales. The algorithm is inspired by the bubble-net hunting strategy. WOA is tested with 29 mathematical optimization problems and 6 structural design problems. Optimization results prove that the WOA algorithm is very competitive compared to the state-of-art meta-heuristic algorithms as well as conventional methods. The source codes of the WOA algorithm are publicly available at http://www.alimirjalili.com/WOA.html.},
  keywords = {Algorithm, Benchmark, Constrained optimization, Genetic algorithm, Heuristic algorithm, Optimization, Particle swarm optimization, Structural optimization},
  language = {en-US},
  urldate  = {2023-10-14},
  url      = {https://www.sciencedirect.com/science/article/pii/S0965997816300163}
}

@article{Karaboga2009108,
  author  = {D. Karaboga and B. Akay},
  title   = {A comparative study of Artificial Bee Colony algorithm},
  year    = {2009},
  journal = {Applied Mathematics and Computation},
  volume  = {214},
  number  = {1},
  pages   = {108--132},
  doi     = {10.1016/j.amc.2009.03.090},
  url     = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-67349273050&doi=10.1016%2fj.amc.2009.03.090&partnerID=40&md5=505464030a4a96a1998b20803cd113ce},
  note    = {Cited by: 2940}
}

@article{Meraihi2020,
  author   = {Meraihi, Yassine and Ramdane-Cherif, Amar and Acheli, Dalila and Mahseur, Mohammed},
  title    = {Dragonfly algorithm: a comprehensive review and applications},
  journal  = {Neural Computing and Applications},
  volume   = {32},
  number   = {21},
  pages    = {16625-16646},
  year     = {2020},
  month    = {11},
  day      = {1},
  issn     = {1433-3058},
  doi      = {10.1007/s00521-020-04866-y},
  url      = {https://doi.org/10.1007/s00521-020-04866-y},
  abstract = {Dragonfly algorithm (DA) is a novel swarm intelligence meta-heuristic optimization algorithm inspired by the dynamic and static swarming behaviors of artificial dragonflies in nature. It has proved its effectiveness and superiority compared to several well-known meta-heuristics available in the literature. This paper presents a comprehensive review of DA and its new variants classified into modified and hybrid versions. It also describes the main diverse applications of DA in several fields and areas such as machine learning, neural network, image processing, robotics, and engineering. Finally, the paper suggests some possible interesting research on the applications and hybridizations of DA for future works.}
}

@book{10.5555/1557464,
  author    = {A. P. Engelbrecht},
  title     = {Computational Intelligence: An Introduction},
  year      = {2007},
  publisher = {Wiley Publishing},
  isbn      = {0470035617},
  edition   = {2nd},
  abstract  = {Computational Intelligence: An Introduction, Second Edition offers an in-depth exploration into the adaptive mechanisms that enable intelligent behaviour in complex and changing environments. The main focus of this text is centred on the computational modelling of biological and natural intelligent systems, encompassing swarm intelligence, fuzzy systems, artificial neutral networks, artificial immune systems and evolutionary computation. Engelbrecht provides readers with a wide knowledge of Computational Intelligence (CI) paradigms and algorithms; inviting readers to implement and problem solve real-world, complex problems within the CI development framework. This implementation framework will enable readers to tackle new problems without any difficulty through a single Java class as part of the CI library. Key features of this second edition include: A tutorial, hands-on based presentation of the material. State-of-the-art coverage of the most recent developments in computational intelligence with more elaborate discussions on intelligence and artificial intelligence (AI). New discussion of Darwinian evolution versus Lamarckian evolution, also including swarm robotics, hybrid systems and artificial immune systems. A section on how to perform empirical studies; topics including statistical analysis of stochastic algorithms, and an open source library of CI algorithms. Tables, illustrations, graphs, examples, assignments, Java code implementing the algorithms, and a complete CI implementation and experimental framework. Computational Intelligence: An Introduction, Second Edition is essential reading for third and fourth year undergraduate and postgraduate students studying CI. The first edition has been prescribed by a number of overseas universities and is thus a valuable teaching tool. In addition, it will also be a useful resource for researchers in Computational Intelligence and Artificial Intelligence, as well as engineers, statisticians, operational researchers, and bioinformaticians with an interest in applying AI or CI to solve problems in their domains. Check out http://www.ci.cs.up.ac.za for examples, assignments and Java code implementing the algorithms.}
}